{"version":3,"sources":["components/navbar.jsx","components/products.jsx","components/posts.jsx","components/home.jsx","components/admin/sideBar.jsx","components/admin/users.jsx","components/admin/posts.jsx","components/admin/dashboard.jsx","components/productDetails.jsx","components/notFound.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","to","Products","state","products","id","name","this","map","product","key","Component","Posts","match","location","result","queryString","parse","search","console","log","params","year","month","Home","SideBar","Users","Dashboard","path","conmponent","ProductDetails","handleSave","props","history","push","onClick","NotFound","App","className","component","render","someProp","from","exact","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4SAsBeA,EAnBA,WACb,OACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,aAAT,aAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,kBAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,YCYOC,E,4MAxBbC,MAAQ,CACNC,SAAU,CACR,CAAEC,GAAI,EAAGC,KAAM,aACf,CAAED,GAAI,EAAGC,KAAM,aACf,CAAED,GAAI,EAAGC,KAAM,e,uDAKjB,OACE,6BACE,wCACA,4BACGC,KAAKJ,MAAMC,SAASI,KAAI,SAACC,GAAD,OACvB,wBAAIC,IAAKD,EAAQJ,IACf,kBAAC,IAAD,CAAMJ,GAAE,oBAAeQ,EAAQJ,KAAOI,EAAQH,gB,GAhBrCK,a,iBCURC,EAXD,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAChBC,EAASC,IAAYC,MAAMH,EAASI,QAE1C,OADAC,QAAQC,IAAIL,GAEV,6BACE,qCADF,SAESF,EAAMQ,OAAOC,KAFtB,WAEoCT,EAAMQ,OAAOE,QCFtCC,EAJF,WACX,OAAO,qC,OCcMC,EAdC,WAEd,OACE,4BACE,4BACE,kBAAC,IAAD,CAAMxB,GAAG,gBAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,gBAAT,YCLOyB,EAJD,WACZ,OAAO,4CCOMd,EARD,WACZ,OACE,6BACE,6CCWSe,EAXG,SAAC,GAAc,EAAZd,MACnB,OACE,6BACE,+CACA,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOe,KAAK,eAAeC,WAAYH,IACvC,kBAAC,IAAD,CAAOE,KAAK,eAAeC,WAAYjB,MCQ9BkB,E,4MAhBbC,WAAa,WAGX,EAAKC,MAAMC,QAAQC,KAAK,c,uDAIxB,OACE,6BACE,iDAAuB3B,KAAKyB,MAAMnB,MAAMQ,OAAOhB,IAC/C,4BAAQ8B,QAAS5B,KAAKwB,YAAtB,a,GAXqBpB,aCIdyB,EAJE,WACf,OAAO,0CCkCMC,G,6KAxBX,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKC,UAAU,WACb,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOV,KAAK,gBAAgBW,UAAWT,IACvC,kBAAC,IAAD,CACEF,KAAK,YACLY,OAAQ,SAACR,GAAD,OAAW,kBAAC,EAAD,eAAUS,SAAS,YAAeT,OAEvD,kBAAC,IAAD,CAAOJ,KAAK,wBAAwBW,UAAW3B,IAC/C,kBAAC,IAAD,CAAU8B,KAAK,YAAYzC,GAAG,WAC9B,kBAAC,IAAD,CAAO2B,KAAK,SAASW,UAAWZ,IAChC,kBAAC,IAAD,CAAOC,KAAK,aAAaW,UAAWH,IACpC,kBAAC,IAAD,CAAOR,KAAK,IAAIe,OAAK,EAACJ,UAAWf,IACjC,kBAAC,IAAD,CAAUvB,GAAG,sB,GAlBPU,cCCEiC,QACW,cAA7BC,OAAO/B,SAASgC,UAEe,UAA7BD,OAAO/B,SAASgC,UAEhBD,OAAO/B,SAASgC,SAASjC,MACvB,2DCXNkC,IAASP,OAEP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFQ,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.a9f1ea98.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\"; //prevent full page reload\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <ul>\r\n      <li>\r\n        <Link to=\"/\">Home</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/products\">Products</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/posts/2018/06\">Posts</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/admin\">Admin</Link>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\"; //prevent full page reload\n\nclass Products extends Component {\n  state = {\n    products: [\n      { id: 1, name: \"Product 1\" },\n      { id: 2, name: \"Product 2\" },\n      { id: 3, name: \"Product 3\" },\n    ],\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Products</h1>\n        <ul>\n          {this.state.products.map((product) => (\n            <li key={product.id}>\n              <Link to={`/products/${product.id}`}>{product.name}</Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Products;\n","import React from \"react\";\nimport queryString from \"query-string\";\nconst Posts = ({ match, location }) => {\n  const result = queryString.parse(location.search);\n  console.log(result);\n  return (\n    <div>\n      <h1>Posts</h1>\n      Year: {match.params.year}, Month:{match.params.month}\n    </div>\n  );\n};\n\nexport default Posts;\n","import React from \"react\";\n\nconst Home = () => {\n  return <h1>Home</h1>;\n};\n\nexport default Home;\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst SideBar = () => {\r\n  /* ul>(li>Link[to=\"\"])*2 */\r\n  return (\r\n    <ul>\r\n      <li>\r\n        <Link to=\"/admin/posts\">Posts</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/admin/users\">Users</Link>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default SideBar;\r\n","import React from \"react\";\n\nconst Users = () => {\n  return <h1>Admin Users</h1>;\n};\n\nexport default Users;\n","import React from \"react\";\n\nconst Posts = () => {\n  return (\n    <div>\n      <h1>Admin Posts</h1>\n    </div>\n  );\n};\n\nexport default Posts;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport SideBar from \"./sideBar\";\nimport Users from \"./users\";\nimport Posts from \"./posts\";\nconst Dashboard = ({ match }) => {\n  return (\n    <div>\n      <h1>Admin Dashboard</h1>\n      <SideBar />\n      <Route path=\"/admin/users\" conmponent={Users} />\n      <Route path=\"/admin/posts\" conmponent={Posts} />\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React, { Component } from \"react\";\n\nclass ProductDetails extends Component {\n  handleSave = () => {\n    // Navigate to /products\n    // this.props.history.replace(\"/products\"); //no history; cannot be back; used in login page\n    this.props.history.push(\"/products\"); //push to history; can be back\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Product Details - {this.props.match.params.id}</h1>\n        <button onClick={this.handleSave}>Save</button>\n      </div>\n    );\n  }\n}\n\nexport default ProductDetails;\n","import React from \"react\";\n\nconst NotFound = () => {\n  return <h1>Not Found</h1>;\n};\n\nexport default NotFound;\n","import React, { Component } from \"react\";\r\nimport NavBar from \"./components/navbar\";\r\nimport Products from \"./components/products\";\r\nimport Posts from \"./components/posts\";\r\nimport Home from \"./components/home\";\r\nimport Dashboard from \"./components/admin/dashboard\";\r\nimport ProductDetails from \"./components/productDetails\";\r\nimport NotFound from \"./components/notFound\";\r\nimport \"./App.css\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavBar />\r\n        <div className=\"content\">\r\n          <Switch>\r\n            {/* switch order with: most specific one --> generate one*/}\r\n            <Route path=\"/products/:id\" component={ProductDetails} />\r\n            <Route\r\n              path=\"/products\"\r\n              render={(props) => <Products someProp=\"someProp\" {...props} />}\r\n            />\r\n            <Route path=\"/posts/:year?/:month?\" component={Posts} />\r\n            <Redirect from=\"/postings\" to=\"/posts\" />\r\n            <Route path=\"/admin\" component={Dashboard} />\r\n            <Route path=\"/not-found\" component={NotFound} />\r\n            <Route path=\"/\" exact component={Home} />\r\n            <Redirect to=\"/not-found\" />\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  //add history()\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}